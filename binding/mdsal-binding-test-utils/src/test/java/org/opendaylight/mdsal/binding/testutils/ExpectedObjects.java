/*
 * Copyright (c) 2016 Red Hat, Inc. and others. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.mdsal.binding.testutils;

import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.mdsal.test.augment.rev140709.TreeComplexUsesAugmentBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.mdsal.test.augment.rev140709.complex.from.grouping.ContainerWithUsesBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.mdsal.test.binding.rev140701.Top;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.mdsal.test.binding.rev140701.TopBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.mdsal.test.binding.rev140701.two.level.list.TopLevelList;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.mdsal.test.binding.rev140701.two.level.list.TopLevelListBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.mdsal.test.binding.rev140701.two.level.list.TopLevelListKey;
import org.opendaylight.yangtools.yang.binding.util.BindingMap;

/**
 * The object initialization code in this class was generated by AssertDataObjects.
 *
 * @see AssertDataObjects
 * @see AssertDataObjectsTest
 */
@Deprecated(since = "8.0.9", forRemoval = true)
public final class ExpectedObjects {

    private ExpectedObjects() {
        // Hidden on purpose
    }

    public static TopLevelList topLevelList() {
        return new TopLevelListBuilder()
                .withKey(new TopLevelListKey("foo"))
                .setName("foo")
                .addAugmentation(new TreeComplexUsesAugmentBuilder()
                    .setContainerWithUses(new ContainerWithUsesBuilder().setLeafFromGrouping("foo").build())
                    .build())
                .build();
    }

    public static Top top() {
        return new TopBuilder()
                .setTopLevelList(BindingMap.of(new TopLevelListBuilder()
                    .setName("foo")
                    .addAugmentation(new TreeComplexUsesAugmentBuilder()
                        .setContainerWithUses(new ContainerWithUsesBuilder().setLeafFromGrouping("foo").build())
                        .build())
                    .build()))
                .build();
    }
}
