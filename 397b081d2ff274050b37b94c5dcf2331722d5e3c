{
  "comments": [
    {
      "key": {
        "uuid": "40c14977_ec246ba2",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-07-23T10:26:40Z",
      "side": 1,
      "message": "Sorry, this won\u0027t work correctly either. If we have had a previous direct registration and are pulling in a dependency (below), we will end up removing it, resulting in it being stale. If we then remove the dependent module, we will end up i a place, where the module will not be removed at all.",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 159,
        "endChar": 13
      },
      "revId": "397b081d2ff274050b37b94c5dcf2331722d5e3c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abeb8a79_ec444d5e",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 7228
      },
      "writtenOn": "2019-07-23T10:38:27Z",
      "side": 1,
      "message": "\" we will end up removing it\" - I\u0027m not clear how this could happen, as for any soure identifier, it will only be one entry, or it will return (line 142)",
      "parentUuid": "40c14977_ec246ba2",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 159,
        "endChar": 13
      },
      "revId": "397b081d2ff274050b37b94c5dcf2331722d5e3c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62b0113c_972a9d15",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-07-23T12:17:07Z",
      "side": 1,
      "message": "The return above will be effective only if the class loader is the same. if the class loader entry is not present or has expired, we will get here. Note there is no atomic statement of intent to populate the cache, hence this method can be running concurrently in multiple threads (and multiple times in a thread due to recursive invocation on line 162) -- get on 141 and putIfAbsent() on line 151 do nothing to give us any sort of atomicity/ordering guarantees.\n\nputIfAbsent() will return the previous registration, not overwrite it. That means at line 158 we will invalidate the old registration to ctxResolver and retain it -- i.e. we have lost the result of registerSource().\n\nSo now when we try to remove the registration in removeModuleInfo() we will pick up the *old* registration and invoke close() on it, which is a no-op, hence the source will be retained in ctxResolver with now way to clean it up.",
      "parentUuid": "abeb8a79_ec444d5e",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 159,
        "endChar": 13
      },
      "revId": "397b081d2ff274050b37b94c5dcf2331722d5e3c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c42a8625_c5643a1b",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 7228
      },
      "writtenOn": "2019-07-24T01:53:41Z",
      "side": 1,
      "message": "I made a mistake of putIfAbsent, I thought it would overwrite it and return the old value.\n For atomicity/concurrency, no matter registerModuleInfo is triggered by the callout of user code or by bundle scanning, first of all, the corresponding bundle must be resolved/classloader be created at first, only such others can load binding classes through import or reflection/TCCL.\nAnd OSGI would keep the order of registrations as per dependency order of bundles/modules, so is it neccessary to register imported moudles in one call? as imported moudles normally must be there previously, even if it crashes at the moment , the refresh progress will again triger a new round of registration, as long as we \u0027keep one entry for one source identifier \u0027? it finally will be correct.",
      "parentUuid": "62b0113c_972a9d15",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 159,
        "endChar": 13
      },
      "revId": "397b081d2ff274050b37b94c5dcf2331722d5e3c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}