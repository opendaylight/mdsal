{
  "comments": [
    {
      "key": {
        "uuid": "ce66eb08_d2c8c567",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 9
      },
      "lineNbr": 267,
      "author": {
        "id": 7228
      },
      "writtenOn": "2019-07-24T03:32:43Z",
      "side": 1,
      "message": "As mentioned before, this would remove all dependent modules, then what if other moudles depend on them? by implicit registration? and then the \u0027implicit\u0027(Line 63) will always be true because these bundles will not trigger again.",
      "range": {
        "startLine": 267,
        "startChar": 75,
        "endLine": 267,
        "endChar": 83
      },
      "revId": "6d3c303f29a7880e45da2f8444f3de347fe8ba24",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b6a52e5_5f214178",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 9
      },
      "lineNbr": 267,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-07-24T15:49:45Z",
      "side": 1,
      "message": "The entire implicit registration mechanism is stop-gap intended to paper over the race you have highlighted in the issue.\n\nloadClass() can trigger a module info load before it has been explicitly registered. If an explicit registration occurs afterwards, it will take over the previous registration and will clean it up, thus cleaning up the implicit registration.\n\nIf we do not do this, each implicit registration will be a leak -- YangTextSchemaSourceRegistration holds a strong reference to the YangModuleInfo, thus the ClassLoader will never be eligible for GC, which means the Class itself will never be eligible for GC.\n\nThe only possible way out would be to copy out YANG text from the YangModuleInfo and register that (instead the proxy we have now) and then do a PhantomReference dance on loaded YangModuleInfo to unregister the source and a WeakReference indirection to the classloader.",
      "parentUuid": "ce66eb08_d2c8c567",
      "range": {
        "startLine": 267,
        "startChar": 75,
        "endLine": 267,
        "endChar": 83
      },
      "revId": "6d3c303f29a7880e45da2f8444f3de347fe8ba24",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f16420be_d058b4ea",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 9
      },
      "lineNbr": 270,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-07-24T15:49:45Z",
      "side": 1,
      "message": "also note that regInfo.equals() operates on identity, hence this will only tear down registrations which were originally made and not disturb anyone else who may have registered the same package/sourceId.",
      "range": {
        "startLine": 270,
        "startChar": 33,
        "endLine": 270,
        "endChar": 58
      },
      "revId": "6d3c303f29a7880e45da2f8444f3de347fe8ba24",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}