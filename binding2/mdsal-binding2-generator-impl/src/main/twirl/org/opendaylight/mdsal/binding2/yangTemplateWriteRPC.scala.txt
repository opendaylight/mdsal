@**********************************************************
* Twirl YangTemplate for generating yang snippets.        *
* Twirl is transformed to Scala and compiled. Then,       *
* it can be called from Java with particular input        *
* parameters to render desired output code.               *
*                                                         *
* Note: we should introduce our own format instead of txt *
***********************************************************@

@import org.opendaylight.yangtools.yang.model.api.ContainerSchemaNode
@import org.opendaylight.yangtools.yang.model.api.RpcDefinition
@import org.opendaylight.yangtools.yang.model.api.Status

@(rpc: RpcDefinition)
rpc @{rpc.getQName().getLocalName()} {
    @if(rpc.getDescription() != null && !rpc.getDescription().isEmpty()) {
        "@{rpc.getDescription()}";
    }
    @if(rpc.getGroupings() != null && !rpc.getGroupings().isEmpty()) {
        @yangTemplateWriteGroupingDefs(rpc.getGroupings())
    }
    @if(rpc.getInput() != null) {
        @writeRpcInput(rpc.getInput())
    }
    @if(rpc.getOutput() != null) {
        @writeRpcOutput(rpc.getOutput())
    }
    @if(rpc.getReference() != null && !rpc.getReference().isEmpty()) {
        reference "@{rpc.getReference()}";
    }
    @if(rpc.getStatus() == Status.DEPRECATED) {
        status @{rpc.getStatus()};
    }
}

@writeRpcInput(input: ContainerSchemaNode) = {
    input {
        @if(input.getChildNodes != null && !input.getChildNodes().isEmpty()) {
            @yangTemplateWriteDataSchemaNodes(input.getChildNodes)
        }
    }
}

@writeRpcOutput(output: ContainerSchemaNode) = {
    output {
        @if(output.getChildNodes != null && !output.getChildNodes().isEmpty()) {
            @yangTemplateWriteDataSchemaNodes(output.getChildNodes)
        }
    }
}