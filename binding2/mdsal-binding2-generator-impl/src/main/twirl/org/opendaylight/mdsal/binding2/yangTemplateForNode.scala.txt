@**********************************************************
* Twirl YangTemplate for generating yang snippets.        *
* Twirl is transformed to Scala and compiled. Then,       *
* it can be called from Java with particular input        *
* parameters to render desired output code.               *
*                                                         *
* Note: we should introduce our own format instead of txt *
***********************************************************@

@import org.opendaylight.yangtools.yang.model.api.DataSchemaNode
@import org.opendaylight.yangtools.yang.model.api.SchemaNode
@import org.opendaylight.yangtools.yang.model.api.ExtensionDefinition
@import org.opendaylight.yangtools.yang.model.api.FeatureDefinition
@import org.opendaylight.yangtools.yang.model.api.GroupingDefinition
@import org.opendaylight.yangtools.yang.model.api.IdentitySchemaNode
@import org.opendaylight.yangtools.yang.model.api.NotificationDefinition
@import org.opendaylight.yangtools.yang.model.api.RpcDefinition
@import org.opendaylight.yangtools.yang.model.api.TypeDefinition
@import org.opendaylight.yangtools.yang.model.api.UnknownSchemaNode
@import org.opendaylight.yangtools.yang.model.api.Status
@import org.opendaylight.yangtools.yang.model.api.`type`.EnumTypeDefinition
@import org.opendaylight.yangtools.yang.model.api.`type`.EnumTypeDefinition.EnumPair

@(node: SchemaNode)
@if(node != null) {
    @generateYangSnippet(node)
}

@generateYangSnippet(node: SchemaNode) = {
    @if(node.isInstanceOf[DataSchemaNode]) {
        @yangTemplateWriteDataSchemaNode(node.asInstanceOf[DataSchemaNode])
    }
    @if(node.isInstanceOf[EnumTypeDefinition.EnumPair]) {
        @writeEnumPair(node.asInstanceOf[EnumTypeDefinition.EnumPair])
    }
    @if(node.isInstanceOf[ExtensionDefinition]) {
        @yangTemplateWriteExtension(node.asInstanceOf[ExtensionDefinition])
    }
    @if(node.isInstanceOf[FeatureDefinition]) {
        @yangTemplateWriteFeature(node.asInstanceOf[FeatureDefinition])
    }
    @if(node.isInstanceOf[GroupingDefinition]) {
        @yangTemplateWriteGroupingDef(node.asInstanceOf[GroupingDefinition])
    }
    @if(node.isInstanceOf[IdentitySchemaNode]) {
        @yangTemplateWriteIdentity(node.asInstanceOf[IdentitySchemaNode])
    }
    @if(node.isInstanceOf[NotificationDefinition]) {
        @yangTemplateWriteNotification(node.asInstanceOf[NotificationDefinition])
    }
    @if(node.isInstanceOf[RpcDefinition]) {
        @yangTemplateWriteRPC(node.asInstanceOf[RpcDefinition])
    }
    @if(node.isInstanceOf[TypeDefinition[_]]) {
            @writeTypeDefinition(node.asInstanceOf[TypeDefinition[_]])
        }
    @if(node.isInstanceOf[UnknownSchemaNode]) {
        @yangTemplateWriteUnknownSchemaNode(node.asInstanceOf[UnknownSchemaNode])
    }
}

@writeTypeDefinition(typeDefinition: TypeDefinition[_]) = {
    type @{typeDefinition.getQName().getLocalName()}
        @if(typeDefinition.getStatus() == Status.DEPRECATED) {
            status @{typeDefinition.getStatus()};
        } else {
        ;
        }
}

@writeEnumPair(enumPair: EnumTypeDefinition.EnumPair) = {
    enum @{enumPair.getName()} {
        @if(enumPair.getValue() != null) {
            value @{enumPair.getValue()};
        } else {
        ;
        }
    }
}