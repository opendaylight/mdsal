@**********************************************************
* Twirl YangTemplate for generating yang snippets.        *
* Twirl is transformed to Scala and compiled. Then,       *
* it can be called from Java with particular input        *
* parameters to render desired output code.               *
*                                                         *
* Note: we should introduce our own format instead of txt *
***********************************************************@

@import org.opendaylight.mdsal.binding2.generator.impl.util.YangTextTemplate
@import org.opendaylight.yangtools.yang.model.api.AugmentationSchema

@(augments: Set[_ <: AugmentationSchema])
@for(augment <- augments) {
    @if(augment != null) {
        @writeAugment(augment)
    }
}

@writeAugment(augment: AugmentationSchema) = {
    augment @{YangTextTemplate.formatToAugmentPath(augment.getTargetPath().getPathFromRoot())} {
        @if(augment.getWhenCondition() != null && !augment.getWhenCondition().toString().isEmpty()) {
            when "@augment.getWhenCondition().toString()";
        }
        @if(augment.getDescription() != null && !augment.getDescription().isEmpty()) {
            description "@augment.getDescription().toString()";
        }
        @if(augment.getReference() != null && !augment.getReference().isEmpty()) {
            reference "@augment.getReference().toString()";
        }
        @if(augment.getStatus() != null) {
            status "@augment.getStatus()";
        }
        @if(augment.getChildNodes() != null && !augment.getChildNodes().isEmpty()) {
            @yangTemplateWriteDataSchemaNodes(augment.getChildNodes())
        }
        @if(augment.getUses() != null && !augment.getUses().isEmpty()) {
            @yangTemplateWriteUsesNodes(augment.getUses())
        }
    }
}