@*
 * Copyright (c) 2018 ZTE, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 *@

@import org.apache.commons.text.StringEscapeUtils.escapeJava
@import org.opendaylight.mdsal.binding.javav2.model.api.Type
@import org.opendaylight.mdsal.binding.javav2.model.api.GeneratedType
@import org.opendaylight.mdsal.binding.javav2.model.api.Constant
@import org.opendaylight.mdsal.binding.javav2.util.BindingMapping
@import org.opendaylight.mdsal.binding.javav2.generator.util.Types
@import org.opendaylight.yangtools.yang.common.QName;
@import org.opendaylight.yangtools.yang.common.Revision;

@(genType: GeneratedType, importedNames: Map[String, String], importedName: Function[Type, String], qnameOnly: Boolean)
@for(c <- genType.getConstantDefinitions) {
    @if(c.getName.startsWith(BindingMapping.PATTERN_CONSTANT_NAME)) {
    @if(!qnameOnly) {
        @defining(c.getName.substring(BindingMapping.PATTERN_CONSTANT_NAME.length).toLowerCase) { suffix =>
        @defining(c.getValue.asInstanceOf[Map[String, String]]) { cValue =>
        public static final @{importedNames.get("list")}<@{importedNames.get("string")}> @{c.getName} = @{importedNames.get("immutableList")}.of(
            @{(cValue.keySet map {escapeJava}).mkString("\"", "\", \"", "\"")});
        @if(cValue.size == 1) {
            private static final @{importedNames.get("pattern")} @{BindingMapping.MEMBER_PATTERN_LIST}@{suffix} = @{importedNames.get("pattern")}.compile(@{c.getName}.get(0));
            private static final String @{BindingMapping.MEMBER_REGEX_LIST}@{suffix} = "@{escapeJava(cValue.values.stream.findFirst.get)}";
        } else {
            private static final @{importedNames.get("pattern")}[] @{BindingMapping.MEMBER_PATTERN_LIST}@{suffix} = @{importedNames.get("codeHelpers")}.compilePatterns(@{c.getName});
            private static final String[] @{BindingMapping.MEMBER_REGEX_LIST}@{suffix} = {
                @{(cValue.keySet map {escapeJava}).mkString("\"", "\", \"", "\"")}
            };
        }}}}
    } else {
        public static final @{importedName(c.getType())} @{c.getName} =
        @if(c.getValue.isInstanceOf[QName]) {
            @defining(c.getValue.asInstanceOf[QName]) { qname =>
            @{importedNames.get("qname")}.create("@{qname.getNamespace}",
            @defining(qname.getRevision()) { rev =>
                @if(rev.isPresent()) {
                    "@{rev.get}"
                } else {
                    "null";
                }
            }, "@{qname.getLocalName}").intern();
            }
        } else {
            @{c.getValue};
        }
    }
}