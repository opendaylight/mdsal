@**********************************************************
* Twirl InterfaceTemplate for generating Java interface   *
* source code. Twirl is transformed to Scala and compiled.*
* Then, it can be called from Java with particular input  *
* parameters to render desired output code.               *
*                                                         *
* Note: we should introduce our own format instead of txt *
***********************************************************@

@import java.util.List
@import org.opendaylight.mdsal.binding2.model.api.Enumeration
@import org.opendaylight.mdsal.binding2.model.api.GeneratedType
@import org.opendaylight.mdsal.binding2.java.api.generator.util.BaseTemplateUtil.formatDataForJavaDoc
@import org.opendaylight.mdsal.binding2.java.api.generator.util.BaseTemplateUtil.wrapToDocumentation
@import org.opendaylight.mdsal.binding2.java.api.generator.util.BaseTemplateUtil.writeEnumeration

@(genType: GeneratedType, importedName: String)
@if(genType != null) {
@{wrapToDocumentation(formatDataForJavaDoc(genType))}
public enum @{genType.getName()} {
@{writeEnumeration(genType.asInstanceOf[Enumeration])}

    @{importedName} name;
    int value;
    private static final java.util.Map<java.lang.Integer, @{genType.getName()}> VALUE_MAP;

    static {
        final com.google.common.collect.ImmutableMap.Builder<java.lang.Integer, @{genType.getName()}> b = com.google.common.collect.ImmutableMap.builder();
        for (@{genType.getName()} enumItem : @{genType.getName()}.values())
        {
            b.put(enumItem.value, enumItem);
        }

        VALUE_MAP = b.build();
    }

    private @{genType.getName()}(int value, @{importedName} name) {
        this.value = value;
        this.name = name;
    }

    /**
     * Returns the name of the enumeration item as it is specified in the input yang.
     *
     * @@return the name of the enumeration item as it is specified in the input yang
     */
    public @{importedName} getName() {
        return name;
    }

    /**
     * @@return integer value
     */
    public int getIntValue() {
        return value;
    }

    /**
     * @@param valueArg
     * @@return corresponding @{genType.getName()} item
     */
    public static @{genType.getName()} forValue(int valueArg) {
        return VALUE_MAP.get(valueArg);
    }
}
}