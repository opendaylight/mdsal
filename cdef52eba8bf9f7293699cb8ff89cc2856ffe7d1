{
  "comments": [
    {
      "key": {
        "uuid": "959fdb82_78bd435d",
        "filename": "binding/mdsal-binding-dom-adapter/src/main/java/org/opendaylight/mdsal/binding/dom/adapter/LazyDataObjectModification.java",
        "patchSetId": 8
      },
      "lineNbr": 250,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-03-15T21:24:43Z",
      "side": 1,
      "message": "These casts are ugly -- bindingPathArgumentChild() is getting a PathArgument, which means it needs to guarantee we are getting a DataObject specialization.",
      "range": {
        "startLine": 250,
        "startChar": 16,
        "endLine": 250,
        "endChar": 60
      },
      "revId": "cdef52eba8bf9f7293699cb8ff89cc2856ffe7d1",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1133f2c_63ff3316",
        "filename": "binding/mdsal-binding-dom-codec/src/main/java/org/opendaylight/mdsal/binding/dom/codec/api/BindingCodecTreeNode.java",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-03-15T21:24:43Z",
      "side": 1,
      "message": "This is API-incompatible change.\n\nWhy do we even need to change this? I understand the implementation side of things where we track enum values, etc. and have a tree organized through SchemaPath.\n\nThis change makes things inconsistent right below ...",
      "range": {
        "startLine": 28,
        "startChar": 48,
        "endLine": 28,
        "endChar": 61
      },
      "revId": "cdef52eba8bf9f7293699cb8ff89cc2856ffe7d1",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bc11ab5_b041c98a",
        "filename": "binding/mdsal-binding-dom-codec/src/main/java/org/opendaylight/mdsal/binding/dom/codec/api/BindingCodecTreeNode.java",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 7228
      },
      "writtenOn": "2019-03-16T00:42:11Z",
      "side": 1,
      "message": "That is going to be compatible with typedef class so we reuse BindingCodecTreeNode, or else we have to redefine a new struct like BindingCodecLeafNode just for typedef type, and then consequently many changes come.",
      "parentUuid": "e1133f2c_63ff3316",
      "range": {
        "startLine": 28,
        "startChar": 48,
        "endLine": 28,
        "endChar": 61
      },
      "revId": "cdef52eba8bf9f7293699cb8ff89cc2856ffe7d1",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "515d9ef3_4b3b3363",
        "filename": "binding/mdsal-binding-dom-codec/src/main/java/org/opendaylight/mdsal/binding/dom/codec/api/BindingCodecTreeNode.java",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-04-10T13:32:10Z",
      "side": 1,
      "message": "I see, and I also noticed the mighty hack that is LeafNodeCodecContext. Let my try to explore this a bit more.",
      "parentUuid": "2bc11ab5_b041c98a",
      "range": {
        "startLine": 28,
        "startChar": 48,
        "endLine": 28,
        "endChar": 61
      },
      "revId": "cdef52eba8bf9f7293699cb8ff89cc2856ffe7d1",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fab3ff3a_2a4d9591",
        "filename": "binding/mdsal-binding-dom-codec/src/main/java/org/opendaylight/mdsal/binding/dom/codec/api/BindingCodecTreeNode.java",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-03-15T21:24:43Z",
      "side": 1,
      "message": "... right here. Since T is now BindingObject, the entire reference to getImplementedInterface() is wrong -- typedef\u0027d BindingObjects do not have getImplementedInterface(), because they are concrete classes.",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 36,
        "endChar": 40
      },
      "revId": "cdef52eba8bf9f7293699cb8ff89cc2856ffe7d1",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1a53241_98456389",
        "filename": "binding/mdsal-binding-dom-codec/src/main/java/org/opendaylight/mdsal/binding/dom/codec/gen/impl/DataNodeContainerSerializerSource.java",
        "patchSetId": 8
      },
      "lineNbr": 145,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-03-15T21:24:43Z",
      "side": 1,
      "message": "Why is this check needed? Note that getBaseType() follows yang type rules, so:\n\nleaf foo {\n    type string {\n        pattern \"[ab]\";\n    }\n}\n\ndoes not have a base type, but it does have restrictions and it does have a generated BindingObject.",
      "range": {
        "startLine": 145,
        "startChar": 12,
        "endLine": 145,
        "endChar": 75
      },
      "revId": "cdef52eba8bf9f7293699cb8ff89cc2856ffe7d1",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91c2e7bd_16dae9fb",
        "filename": "binding/mdsal-binding-dom-codec/src/main/java/org/opendaylight/mdsal/binding/dom/codec/gen/impl/DataNodeContainerSerializerSource.java",
        "patchSetId": 8
      },
      "lineNbr": 145,
      "author": {
        "id": 7228
      },
      "writtenOn": "2019-03-16T00:48:33Z",
      "side": 1,
      "message": "Here it just filters out types which could use leaf cache, it should consider all conditions.",
      "parentUuid": "e1a53241_98456389",
      "range": {
        "startLine": 145,
        "startChar": 12,
        "endLine": 145,
        "endChar": 75
      },
      "revId": "cdef52eba8bf9f7293699cb8ff89cc2856ffe7d1",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9efbf61c_84bd2f38",
        "filename": "binding/yang-binding/src/main/java/org/opendaylight/yangtools/yang/binding/BindingSerializer.java",
        "patchSetId": 8
      },
      "lineNbr": 13,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-03-15T21:24:43Z",
      "side": 1,
      "message": "what is this method supposed to do? what does \u0027name\u0027 stand for?",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 13,
        "endChar": 38
      },
      "revId": "cdef52eba8bf9f7293699cb8ff89cc2856ffe7d1",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7ea9401_d4ff5c14",
        "filename": "binding/yang-binding/src/main/java/org/opendaylight/yangtools/yang/binding/BindingSerializer.java",
        "patchSetId": 8
      },
      "lineNbr": 13,
      "author": {
        "id": 7228
      },
      "writtenOn": "2019-03-16T01:00:47Z",
      "side": 1,
      "message": "Here is for reusing DataObjectCodecContext#getLeafChild(String leafnName) to get leaf codec context, the name stands for the leaf node name.",
      "parentUuid": "9efbf61c_84bd2f38",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 13,
        "endChar": 38
      },
      "revId": "cdef52eba8bf9f7293699cb8ff89cc2856ffe7d1",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a487a7b2_2566c2c3",
        "filename": "binding/yang-binding/src/main/java/org/opendaylight/yangtools/yang/binding/BindingSerializer.java",
        "patchSetId": 8
      },
      "lineNbr": 13,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-04-10T12:43:44Z",
      "side": 1,
      "message": "Alright, I finally wrapped my mind around the context of this. I think we can make this work without this change and without involving DataObjectSerializerSource at all.\n\nThe thing is:\n- BindingSerializer is just an aspect of BindingStreamEventWriter implementation\n- leaves are atomic objects\n\nThat means that the generated serializer can just forward them via BindingStreamEventWriter.leafNode():\n- BindingToNormalizedStreamWriter will work as usual\n- CachingNormalizedNodeSerializer will pick them from the forwarding stream, examine and either forward or directly add to the DOM result.\n\nI\u0027ll update this patch to reflect this.",
      "parentUuid": "a7ea9401_d4ff5c14",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 13,
        "endChar": 38
      },
      "revId": "cdef52eba8bf9f7293699cb8ff89cc2856ffe7d1",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}