{
  "comments": [
    {
      "key": {
        "uuid": "6b1a7f00_281228e6",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-07-17T15:09:18Z",
      "side": 1,
      "message": "this does not look quite right:\n\nthis method can be called via resolveModuleInfo(Class), at which point it will trigger registration. That registration will be stuck in this map without ever being cleared.",
      "range": {
        "startLine": 151,
        "startChar": 12,
        "endLine": 152,
        "endChar": 90
      },
      "revId": "723e619346f23e8f32bf6264f7218457db03e096",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebd34f27_b11958ff",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 7228
      },
      "writtenOn": "2019-07-18T08:18:43Z",
      "side": 1,
      "message": "resolveModuleInfo will only be triggered by bundle adding event ,otherwise we can/should not call it twice at this moment, and see line 143 above, if there\u0027re more triggering it will do registration only once.",
      "parentUuid": "6b1a7f00_281228e6",
      "range": {
        "startLine": 151,
        "startChar": 12,
        "endLine": 152,
        "endChar": 90
      },
      "revId": "723e619346f23e8f32bf6264f7218457db03e096",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ff57b64_f854aaf6",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-07-18T09:32:42Z",
      "side": 1,
      "message": "right, but there really are two distinct paths:\n1) the one triggered through bundle scanning, i.e. normal discovery\n2) the one triggered through loadClass(), which can trigger as soon as the bundle is resolved (by user code starting)\n\nnote the second one is kind of implicit registration, which will never be cleaned up by itself, as there is no callout which would remove it. We cannot rely on GC to do that, because we have registered a class loader resource, hence the class loader will not be GC\u0027d, hence the class itself will not be GC\u0027d.\n\nI think we need to track implicit registrations and turn them into explicit ones when the corresponding YangModuleInfo is registered.",
      "parentUuid": "ebd34f27_b11958ff",
      "range": {
        "startLine": 151,
        "startChar": 12,
        "endLine": 152,
        "endChar": 90
      },
      "revId": "723e619346f23e8f32bf6264f7218457db03e096",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee1ab8d9_b9ca3292",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 7228
      },
      "writtenOn": "2019-07-18T09:56:16Z",
      "side": 1,
      "message": "Confused that, as for 2), would not the loaded class also be registered by bundle scanning since the binding class always belongs to a bundle which would trigger 1) but it would return because the implicit registration has already done that? then it fianlly would be removed by removing bundle?",
      "parentUuid": "3ff57b64_f854aaf6",
      "range": {
        "startLine": 151,
        "startChar": 12,
        "endLine": 152,
        "endChar": 90
      },
      "revId": "723e619346f23e8f32bf6264f7218457db03e096",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2af58c25_0b4224ee",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-07-18T10:13:33Z",
      "side": 1,
      "message": "Hmm, I am not sure. I think packageNameToClassLoader guards against some of the issues, i.e. it would hold on to the old class in case a refresh race were to to trigger.\n\nThere seems to be some shenanigans with packageNameToClassLoader, too -- note how it never removes WeakReferences, hence once populated, it will never update reference to the class loader -- it will just always fall back to backingLoadingStrategy -- which is probably TCCL.\n\nThe more I look at this class, the stranger it feels:\n- YangTextSchemaContextResolver already provides access to schema sources, so sourceIdentifierToModuleInfo is not needed for that functionality\n- YangTextSchemaContextResolver deals with multiple sources of the same SourceIdentifier just fine, so there really is no need for the \u0027must register at most once\u0027 dance",
      "parentUuid": "ee1ab8d9_b9ca3292",
      "range": {
        "startLine": 151,
        "startChar": 12,
        "endLine": 152,
        "endChar": 90
      },
      "revId": "723e619346f23e8f32bf6264f7218457db03e096",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31f10416_f0d5b907",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-07-17T15:09:18Z",
      "side": 1,
      "message": "this does not look right either: if we register the same ModuleInfo twice, the second unregistration will explode here because there is only one registration present.",
      "range": {
        "startLine": 165,
        "startChar": 8,
        "endLine": 165,
        "endChar": 82
      },
      "revId": "723e619346f23e8f32bf6264f7218457db03e096",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8251ca8_a5ee69f1",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 7228
      },
      "writtenOn": "2019-07-18T08:18:43Z",
      "side": 1,
      "message": "removeModuleInfo here also would be triggered by bundle stopping event, since there is always one entry of the same source identifier according to method removeModuleInfo, properly we could remove requieNonNull first in case there\u0027re more triggering from \"same bundles\".",
      "parentUuid": "31f10416_f0d5b907",
      "range": {
        "startLine": 165,
        "startChar": 8,
        "endLine": 165,
        "endChar": 82
      },
      "revId": "723e619346f23e8f32bf6264f7218457db03e096",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b39c2b9_bf3f7874",
        "filename": "binding/mdsal-binding-generator-impl/src/main/java/org/opendaylight/mdsal/binding/generator/impl/ModuleInfoBackedContext.java",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-07-18T09:32:42Z",
      "side": 1,
      "message": "Now here\u0027s is another problem: note that this unregisters all dependencies, so if we have:\n\nbundle1: foo.yang\nbundle2: bar.yang, depends on foo.yang\n\nand we uninstall bundle2, we will also remove foo.yang -- hence our model view will be borked. It *may* get restored by implicit loading, but that is not guaranteed.",
      "range": {
        "startLine": 168,
        "startChar": 0,
        "endLine": 170,
        "endChar": 9
      },
      "revId": "723e619346f23e8f32bf6264f7218457db03e096",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}