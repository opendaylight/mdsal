{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "72780cfc_03771b3c",
        "filename": "binding/mdsal-binding-generator/src/test/java/org/opendaylight/mdsal/binding/generator/impl/IdentityrefTypeTest.java",
        "patchSetId": 18
      },
      "lineNbr": 64,
      "author": {
        "id": 649
      },
      "writtenOn": "2022-11-18T00:41:50Z",
      "side": 1,
      "message": "why has this changed?",
      "range": {
        "startLine": 64,
        "startChar": 29,
        "endLine": 64,
        "endChar": 30
      },
      "revId": "c819b15042a9409f34a2d3a3fc1b4d49c2023832",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e335fd6_2436f8d7",
        "filename": "binding/mdsal-binding-generator/src/test/java/org/opendaylight/mdsal/binding/generator/impl/Mdsal502Test.java",
        "patchSetId": 18
      },
      "lineNbr": 36,
      "author": {
        "id": 649
      },
      "writtenOn": "2022-11-22T20:30:26Z",
      "side": 1,
      "message": "should private, static and initialized with @BeforeClass",
      "range": {
        "startLine": 36,
        "startChar": 30,
        "endLine": 36,
        "endChar": 35
      },
      "revId": "c819b15042a9409f34a2d3a3fc1b4d49c2023832",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a3382b1_c245316d",
        "filename": "yanglib/mdsal-yanglib-rfc8525/src/main/java/org/opendaylight/mdsal/yanglib/rfc8525/MountPointContextFactoryImpl.java",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 649
      },
      "writtenOn": "2022-11-18T00:44:05Z",
      "side": 1,
      "message": "so ... what conflict is forcing this API change? I do not see anything in the YANG model which would be forcing this to surface.",
      "range": {
        "startLine": 132,
        "startChar": 45,
        "endLine": 132,
        "endChar": 46
      },
      "revId": "c819b15042a9409f34a2d3a3fc1b4d49c2023832",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7f06410_9640a44f",
        "filename": "yanglib/mdsal-yanglib-rfc8525/src/main/java/org/opendaylight/mdsal/yanglib/rfc8525/MountPointContextFactoryImpl.java",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 9155
      },
      "writtenOn": "2022-11-18T09:40:33Z",
      "side": 1,
      "message": "If we use yang model provided in this patch, multiple interfaces with default requireMyGrp() methods would be created. And if there is a class or interface that implements those interfaces it would have a conflict between default methods implemented from different interfaces but having same names, so the naming of those methods was changed similarly to how the naming of the classes.",
      "parentUuid": "9a3382b1_c245316d",
      "range": {
        "startLine": 132,
        "startChar": 45,
        "endLine": 132,
        "endChar": 46
      },
      "revId": "c819b15042a9409f34a2d3a3fc1b4d49c2023832",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fc103e7_10c719c6",
        "filename": "yanglib/mdsal-yanglib-rfc8525/src/main/java/org/opendaylight/mdsal/yanglib/rfc8525/MountPointContextFactoryImpl.java",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 649
      },
      "writtenOn": "2022-11-22T20:27:31Z",
      "side": 1,
      "message": "Right, but looking at the model which this code talks I just do not see where that conflict occurs.\n\nFurthermore, in the other comment (and really across the changed files), the name of the getter method remains the same and name of the require method is changing.\nThose two are supposed to be mirrors, aren\u0027t they?",
      "parentUuid": "b7f06410_9640a44f",
      "range": {
        "startLine": 132,
        "startChar": 45,
        "endLine": 132,
        "endChar": 46
      },
      "revId": "c819b15042a9409f34a2d3a3fc1b4d49c2023832",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c077f52_2e16f71d",
        "filename": "yanglib/mdsal-yanglib-rfc8525/src/main/java/org/opendaylight/mdsal/yanglib/rfc8525/MountPointContextFactoryImpl.java",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 649
      },
      "writtenOn": "2022-11-23T09:14:55Z",
      "side": 1,
      "message": "Thinking about this a bit more, dealing with groupings overlapping is out of the scope for this patch. It cannot be solved anyway, because the conflict may arise only when three models are combined, and if each of them is in a separate artifact there is just nothing we can do about it:\n\nartifact one:\n\n  module foo {\n    grouping foo {\n      // does not know about bar\n      leaf foo-bar { type string; }\n    }\n  }    \n\nartifact two:\n\n  module bar {\n    grouping foo {\n      // does not know about foo\n      leaf fooBar { type uint32; }\n    }\n  }\n\nthen we have artifact three depending on artifacts one and two and doing:\n\n  module baz {\n    import foo;\n    import bar;\n\n    container baz {\n      // kaboom: not only on requireFooBar(), but also on getFooBar(), as the\n      // return types conflict\n      uses foo:foo;\n      uses bar:bar;\n    }\n  }\n\nI just do not see a way this can be made to work while retaining modularity or always going for bijective mapping. Neither of those two options is acceptable.",
      "parentUuid": "7fc103e7_10c719c6",
      "range": {
        "startLine": 132,
        "startChar": 45,
        "endLine": 132,
        "endChar": 46
      },
      "revId": "c819b15042a9409f34a2d3a3fc1b4d49c2023832",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    }
  ]
}